{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","highlighted","setHighlighted","contacts","setContacts","console","log","className","onDragEnter","onDragLeave","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","filter","file","type","forEach","a","text","result","parse","header","existing","data","name","onChange","event","target","id","placeholder","value","class","scope","map","contact","index","firstname","lastname","email","notes","inputurl","document","querySelector","setTimeout","objectURL","form_data","FormData","newUrl","append","request","method","body","headers","myImage","fetch","then","response","blob","myBlob","URL","createObjectURL","src","callApi","note","key","style","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc57a697.chunk.js","sourcesContent":["import React from \"react\";\nimport { parse } from \"papaparse\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst callApi=(firstname,lastname, email,notes, index)=> {\n  let inputurl = document.querySelector('#inputurl').value;\n  console.log('the url is ',`${inputurl}?firstname=${firstname}\n  &lastname=${lastname}&email=${email}&notes=${notes}`)\n  setTimeout(() => {\n    var form_data = new FormData();\n  var objectURL\n  let newUrl= `${inputurl}?firstname=${firstname}&lastname=${lastname}&email=${email}&notes=${notes}`\n  form_data.append(\"url\",newUrl);\n  form_data.append(\"config\", document.querySelector('#jsonconfig').value)\n  console.log(form_data)\n  const request = {\n    method: 'POST',\n    body: form_data,\n    headers: {\n      'Authorization': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkIjoxNTEyMTUwODk2NDc4LCJlbWFpbCI6InRlc3Rjb0BtYWlsaW5hdG9yLmNvbSIsIm9yZ05hbWUiOiJ0ZXN0Y28iLCJwYXNzd29yZCI6Ik5hTmFJTGJGb1VPV3V2TUsxd3AxS2xWeDVxMjFLeUhMS01LcmtPVmVNOTYzMTlMdXRIaEcrS3psbTlhSnFnPSIsInByb2ZpbGVJbWFnZSI6ImZhY2Vib29rX3Bob3RvLnBuZyIsInJvbGUiOiJtYXN0ZXIiLCJzY3JlZW5OYW1lIjoidGVzdGNvIiwic3RhdHVzIjoibGl2ZSIsInVzZXJFbWFpbCI6InRlc3Rjb0BtYWlsaW5hdG9yLmNvbSIsInVzZXJJZCI6IjMwNjA1ODNhLWJiMjctNDU4YS1iZTE3LTkxYThhYmNhNzRlYSIsImlhdCI6MTUxMjEzMjg5N30.-tc-ZjbTw20mKaXJaSl6tOw8w5hkm584Q-TsFInCUbo'\n    }\n  }\n  var myImage = document.querySelector('#img' + index);\n  console.log(request)\n  fetch('https://api.alive5.com/1.0/qr/create', request).then(function (response) {\n    return response.blob();\n  }).then(function (myBlob) {\n    console.log('myblob', myBlob)\n    objectURL = URL.createObjectURL(myBlob);\n    console.log('myblob objectURL', objectURL)\n    myImage.src = objectURL\n  });\n  }, 100);\n}\n\nexport default function App() {\n  const [highlighted, setHighlighted] = React.useState(false);\n  const [contacts, setContacts] = React.useState([\n  ]);\n  const onChangeHandler=event=>{\n\n    console.log(event.target.files[0])\n    Array.from(event.target.files)\n            .filter((file) => file.type === \"text/csv\")\n            .forEach(async (file) => {\n              const text = await file.text();\n              const result = parse(text, { header: true });\n              setContacts((existing) => [...existing, ...result.data]);\n            });\n\n}\n  console.log(\"the contacts are\", contacts)\n  return (\n    <div>\n      <h1 className=\"text-center text-4xl\">Drag a file here:</h1>\n      <div\n        className={`p-6 my-2 mx-auto max-w-md border-2 ${\n          highlighted ? \"border-green-600 bg-green-100\" : \"border-gray-600\"\n          }`}\n        onDragEnter={() => {\n          setHighlighted(true);\n        }}\n        onDragLeave={() => {\n          setHighlighted(false);\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          setHighlighted(false);\n\n          Array.from(e.dataTransfer.files)\n            .filter((file) => file.type === \"text/csv\")\n            .forEach(async (file) => {\n              const text = await file.text();\n              const result = parse(text, { header: true });\n              setContacts((existing) => [...existing, ...result.data]);\n            });\n        }}\n      >\n        DROP HERE\n      </div>\n      <div>\n      <input type=\"file\" name=\"file\" onChange={onChangeHandler}/>\n      </div>\n      <div>\n      <label>\n        URL:\n        <input type=\"text\" id=\"inputurl\" placeholder=\"https://alive5.com\" />\n      </label>\n      </div>\n      <div>\n        <textarea id=\"jsonconfig\" value='{\"body\":\"pointed-in\",\"eye\":\"frame5\",\"eyeBall\":\"ball0\",\"erf1\":[\"fh\"],\"erf2\":[],\"erf3\":[\"fh\",\"fv\"],\"brf1\":[],\"brf2\":[],\"brf3\":[],\"bodyColor\":\"#b33737\",\"bgColor\":\"#aca9a9\",\"eye1Color\":\"#000000\",\"eye2Color\":\"#000000\",\"eye3Color\":\"#000000\",\"eyeBall1Color\":\"#000000\",\"eyeBall2Color\":\"#000000\",\"eyeBall3Color\":\"#000000\",\"gradientColor1\":\"#b33737\",\"gradientColor2\":\"#0277bd\",\"gradientType\":\"linear\",\"gradientOnEyes\":true,\"logo\":\"https://alive5cdn.s3.amazonaws.com/images/widgets/upload/1598944645035_qr.png\",\"logoMode\":\"default\"}'></textarea>\n      </div>\n      <table class=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">First Name</th>\n            <th scope=\"col\">Last Name</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Notes</th>\n            <th scope=\"col\">QR-CODE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {contacts.map((contact, index) => {\n            if(contact.firstname) {callApi(contact.firstname, \n              contact.lastname, \n              contact.email,\n              contact.note,\n              index)}\n            return <> \n              <tr key={index}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{contact.firstname}</td>\n                <td>{contact.lastname}</td>\n                <td>{contact.email}</td>\n                <td>{contact.note}</td>\n                <td> <img id={'img' + index}  style={{width:300}} /></td>\n              </tr>\n            </>\n          })}\n        </tbody>\n      </table>\n      {/* <img id=\"img\" /> */}\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}